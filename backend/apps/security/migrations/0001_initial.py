# Generated by Django 5.0.7 on 2025-09-27 08:32

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('policy_type', models.CharField(choices=[('password', 'Password Policy'), ('session', 'Session Policy'), ('login', 'Login Policy'), ('registration', 'Registration Policy'), ('otp', 'OTP Policy'), ('rate_limit', 'Rate Limiting'), ('general', 'General Security')], max_length=20)),
                ('description', models.TextField()),
                ('settings', models.JSONField(default=dict, help_text='Policy configuration in JSON format')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Security Policy',
                'verbose_name_plural': 'Security Policies',
                'db_table': 'security_policies',
                'ordering': ['policy_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AllowedEmailDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(help_text='Domain name (e.g., icpac.net, igad.int)', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid domain name (e.g., icpac.net)', regex='^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')])),
                ('description', models.CharField(blank=True, help_text='Description of the organization/department', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this domain is currently allowed')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether users from this domain require admin approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_domains', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Allowed Email Domain',
                'verbose_name_plural': 'Allowed Email Domains',
                'db_table': 'security_allowed_domains',
                'ordering': ['domain'],
            },
        ),
        migrations.CreateModel(
            name='OTPToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='OTP token (6-8 digits)', max_length=10)),
                ('token_type', models.CharField(choices=[('email', 'Email OTP'), ('sms', 'SMS OTP'), ('registration', 'Registration Verification'), ('password_reset', 'Password Reset'), ('two_factor', 'Two-Factor Authentication')], help_text='Purpose of the OTP token', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for SMS OTP', max_length=15)),
                ('email', models.EmailField(blank=True, help_text='Email address for email OTP', max_length=254)),
                ('is_used', models.BooleanField(default=False, help_text='Whether this token has been used')),
                ('attempts', models.PositiveIntegerField(default=0, help_text='Number of verification attempts')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum allowed attempts')),
                ('expires_at', models.DateTimeField(help_text='When this token expires')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(help_text='User associated with this token', on_delete=django.db.models.deletion.CASCADE, related_name='otp_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP Token',
                'verbose_name_plural': 'OTP Tokens',
                'db_table': 'security_otp_tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('user_login', 'User Login'), ('user_logout', 'User Logout'), ('user_register', 'User Registration'), ('user_profile_update', 'Profile Update'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('booking_create', 'Booking Created'), ('booking_update', 'Booking Updated'), ('booking_cancel', 'Booking Cancelled'), ('booking_approve', 'Booking Approved'), ('booking_reject', 'Booking Rejected'), ('room_create', 'Room Created'), ('room_update', 'Room Updated'), ('room_delete', 'Room Deleted'), ('admin_action', 'Admin Action'), ('permission_change', 'Permission Change'), ('system_config', 'System Configuration'), ('security_violation', 'Security Violation'), ('account_lock', 'Account Locked'), ('account_unlock', 'Account Unlocked'), ('other', 'Other Action')], help_text='Type of action performed', max_length=30)),
                ('description', models.TextField(help_text='Detailed description of the action')),
                ('object_type', models.CharField(blank=True, help_text='Type of object affected (e.g., Booking, Room, User)', max_length=50)),
                ('object_id', models.CharField(blank=True, help_text='ID of the object affected', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional context data in JSON format')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'security_audit_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='security_au_user_id_75039c_idx'), models.Index(fields=['action_type', 'timestamp'], name='security_au_action__10815f_idx'), models.Index(fields=['object_type', 'object_id'], name='security_au_object__616b33_idx'), models.Index(fields=['ip_address', 'timestamp'], name='security_au_ip_addr_3a7126_idx')],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address attempted', max_length=254)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of attempt')),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('attempt_type', models.CharField(choices=[('success', 'Successful Login'), ('failed_password', 'Failed - Wrong Password'), ('failed_user', 'Failed - User Not Found'), ('failed_inactive', 'Failed - Account Inactive'), ('failed_locked', 'Failed - Account Locked'), ('failed_otp', 'Failed - Wrong OTP'), ('blocked', 'Blocked - Too Many Attempts')], help_text='Type of login attempt', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, help_text='User account (if exists)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Login Attempt',
                'verbose_name_plural': 'Login Attempts',
                'db_table': 'security_login_attempts',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['email', 'timestamp'], name='security_lo_email_8ab8a7_idx'), models.Index(fields=['ip_address', 'timestamp'], name='security_lo_ip_addr_d55d6f_idx'), models.Index(fields=['attempt_type', 'timestamp'], name='security_lo_attempt_f397f5_idx')],
            },
        ),
    ]
